name: Build multiprotocol components

on:
  push:
    paths-ignore:
      - '.gitignore'
      - 'README.md'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Check if version already exists
        id: version-check
        run: |
          package_version=$(< ./version)
          # requires GH_TOKEN
          exists=$(gh api repos/${{ github.repository }}/releases/tags/v$package_version >/dev/null 2>&1 && echo "true" || echo "")

          rebuild=$(< ./rebuild)
          simplicity_sdk_tag=$(< ./simplicity_sdk_tag)
          cpcd_tag=$(< ./cpcd_tag)
          echo "rebuild=$rebuild" >> $GITHUB_OUTPUT
          echo "simplicity_sdk_tag=$simplicity_sdk_tag" >> $GITHUB_OUTPUT
          echo "cpcd_tag=$cpcd_tag" >> $GITHUB_OUTPUT
          echo "tag=v$package_version" >> $GITHUB_OUTPUT

          if [ -n "$exists" ];
          then
            echo "Version v$package_version already exists"
            echo "::warning file=version,line=1::Version v$package_version already exists - no release will be created."
            echo "skipped=true" >> $GITHUB_OUTPUT
          else
            echo "Version v$package_version does not exist. Will create release..."
            echo "skipped=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        with:
          name: ${{ steps.version-check.outputs.tag }}
          tag: ${{ steps.version-check.outputs.tag }}
          commit: ${{ github.ref_name }}
          skipIfReleaseExists: true

    outputs:
      skipped: ${{ steps.version-check.outputs.skipped }}
      tag: ${{ steps.version-check.outputs.tag }}
      # allows to overwrite artifacts in same release version when "true"
      rebuild: ${{ steps.version-check.outputs.rebuild }}
      simplicity_sdk_tag: ${{ steps.version-check.outputs.simplicity_sdk_tag }}
      cpcd_tag: ${{ steps.version-check.outputs.cpcd_tag }}

  build-from-arch-containers:
    # The host should always be Linux
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ needs.create-release.outputs.skipped == 'false' || needs.create-release.outputs.rebuild == 'true' }}
    permissions:
      contents: write
      packages: write
    name: Build for ${{ matrix.zigbee }}
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: bookworm
            # below are used by slc and to match artifact names
            zigbee: arm32
            linux_arch: 32
          - arch: aarch64
            distro: bookworm
            # below are used by slc and to match artifact names
            zigbee: arm64
            linux_arch: 64
          - arch: none
            distro: none
            base_image: debian:bookworm
            # below are used by slc and to match artifact names
            zigbee: x86_64
            linux_arch: 64
    steps:
      - uses: actions/checkout@v4

      - name: Warn rebuild
        if: ${{ needs.create-release.outputs.skipped == 'true' && needs.create-release.outputs.rebuild == 'true' }}
        run: |
          echo "::warning file=rebuild,line=1::Rebuild flag is set, overwriting existing release (${{ needs.create-release.outputs.tag }}) artifacts for ${{ matrix.zigbee }}."

      - uses: uraimo/run-on-arch-action@v2
        name: Build artifacts
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          base_image: ${{ matrix.base_image }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Warning: Have to `sudo` in here
          setup: |
            sudo apt-get update
            sudo apt-get install -q -y git git-lfs curl bzip2 unzip xz-utils build-essential make g++ gcc cmake openjdk-21-jre-headless
            sudo rm -rf /var/lib/apt/lists/*
            sudo update-java-alternatives -s temurin-21-jdk-amd64
            export JAVA_HOME=/usr/lib/jvm/temurin-21-jdk-amd64/
            export PATH=$PATH:$JAVA_HOME
            # echo "$(java -version)"

            mkdir -p "${PWD}/artifacts/outputs/systemd"
            mkdir -p "${PWD}/artifacts/outputs/cpcd"
            mkdir -p "${PWD}/artifacts/outputs/zigbeed"
            mkdir -p "${PWD}/artifacts/outputs/otbr"
            mkdir -p "${PWD}/artifacts/outputs/ble"

            echo "Storing artifacts in ${PWD}/artifacts/"

            curl -O https://www.silabs.com/documents/login/software/slc_cli_linux.zip
            unzip -q slc_cli_linux.zip
            rm slc_cli_linux.zip

            curl -o simplicity_sdk.zip -L https://github.com/SiliconLabs/simplicity_sdk/releases/download/${{ needs.create-release.outputs.simplicity_sdk_tag }}/sisdk-sdk.zip
            unzip -q -d simplicity_sdk simplicity_sdk.zip
            rm simplicity_sdk.zip

            slc_cli/slc configuration --sdk ./simplicity_sdk
            slc_cli/slc signature trust
            slc_cli/slc generate --with=zigbee_${{ matrix.zigbee }},linux_arch_${{ matrix.linux_arch }} --without=zigbee_recommended_linux_arch -p=./simplicity_sdk/protocol/zigbee/app/zigbeed/zigbeed.slcp -d=$PWD/artifacts/zigbeed_slcp

            cp simplicity_sdk/app/multiprotocol/containers/multiprotocol-container/_artifacts/etc/zigbeed.conf $PWD/artifacts/outputs/zigbeed/

            echo "Copied zigbeed.conf to ${PWD}/artifacts/outputs/zigbeed/"

            cp simplicity_sdk/app/multiprotocol/containers/multiprotocol-container/_artifacts/systemd/* $PWD/artifacts/outputs/systemd/

            echo "Copied systemd services to ${PWD}/artifacts/outputs/systemd/"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          # env: | # YAML, but pipe character is necessary

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container.
          # This speeds up builds if you are also using githubToken.
          # Any dependencies installed here will be part of the container image that gets cached, so subsequent builds don't have to re-install them.
          install: |
            apt-get update
            apt-get install --no-install-recommends -q -y tar git git-lfs ca-certificates curl bzip2 unzip xz-utils build-essential make g++ gcc cmake libmbedtls-dev
            rm -rf /var/lib/apt/lists/*

          # Produce artifacts and place them in the mounted volume
          run: |
            # Fix `fatal: detected dubious ownership in repository at`
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            # Fix failed verification on git clone
            update-ca-certificates

            cd /

            git clone --depth 1 -b ${{ needs.create-release.outputs.cpcd_tag }} https://github.com/SiliconLabs/cpc-daemon.git
            mkdir cpc-daemon/build
            cd cpc-daemon/build
            cmake ../
            make
            make install
            ldconfig

            cp /cpc-daemon/build/cmake_install.cmake /artifacts/outputs/cpcd/
            cp /cpc-daemon/build/cmake_install.cmake /artifacts/outputs/cpcd/cmake_install.cmake.bak
            cp /cpc-daemon/build/cpcd  /artifacts/outputs/cpcd/
            cp /cpc-daemon/build/libcpc*  /artifacts/outputs/cpcd/
            cp /cpc-daemon/lib/sl_cpc.h  /artifacts/outputs/cpcd/
            cp /cpc-daemon/cpcd.conf  /artifacts/outputs/cpcd/

            sed -i -e "s+uart_device_baud: 115200+uart_device_baud: 460800+g" /artifacts/outputs/cpcd/cpcd.conf
            sed -i -e "s+disable_encryption: false+disable_encryption: true+g" /artifacts/outputs/cpcd/cpcd.conf

            # must be in root of cpc-daemon before sed on cmake file
            cd /cpc-daemon

            # KEEP /cpc-daemon/build:
            # REPL /cpc-daemon/build/libcpc.so.4.5.1.0
            # REPL /cpc-daemon/build/libcpc.so.3
            # REPL /cpc-daemon/build/libcpc.so
            # REPL /cpc-daemon/build/libcpc.pc
            # REPL /cpc-daemon/build/cpcd
            # REPL /cpc-daemon/build/${CMAKE_INSTALL_MANIFEST}
            # REPL /cpc-daemon/./lib/sl_cpc.h
            # REPL /cpc-daemon/./cpcd.conf
            sed -i -e "s+$PWD/build/+./+g" /artifacts/outputs/cpcd/cmake_install.cmake
            sed -i -e "s+$PWD/./lib+.+g" /artifacts/outputs/cpcd/cmake_install.cmake
            sed -i -e "s+$PWD/./+./+g" /artifacts/outputs/cpcd/cmake_install.cmake

            echo "Copied cpcd install files to /artifacts/outputs/cpcd/"

            cd /artifacts/zigbeed_slcp
            make -f zigbeed.Makefile

            cp /artifacts/zigbeed_slcp/build/debug/zigbeed /artifacts/outputs/zigbeed/
            chmod +x /artifacts/outputs/zigbeed/zigbeed

            echo "Copied zigbeed binary to /artifacts/outputs/zigbeed/"

            mv /artifacts/outputs/systemd/master.service /artifacts/outputs/systemd/multiprotocol-master.service
            mv /artifacts/outputs/systemd/otbr@.service /artifacts/outputs/systemd/otbr.service
            sed -i -e "s+iid=%I+iid=2+g" /artifacts/outputs/systemd/otbr.service

            echo "System:" > /artifacts/outputs/built_on.txt
            uname -srvmo >> /artifacts/outputs/built_on.txt
            echo "CPU:" >> /artifacts/outputs/built_on.txt
            cat /proc/cpuinfo | grep "model name" >> /artifacts/outputs/built_on.txt

            cd /artifacts/

            tar Jcf silabs-multiprotocol-components-${{ matrix.zigbee }}.tar.xz -C /artifacts/outputs/ .

            echo "Created tarball at /artifacts/"

      # Items placed in /artifacts in the container will be in ${PWD}/artifacts on the host.
      - name: Upload tarball to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: "artifacts/silabs-multiprotocol-components-${{ matrix.zigbee }}.tar.xz"
          # for "rebuild"
          overwrite: true
          tag: ${{ needs.create-release.outputs.tag }}
